/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <600>;
            global-quick-tap;
            quick-tap-ms = <400>;
        };

        layer_tap_hold: layer_tap_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_HOLD";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        hm_l: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39 36 37 38 0 12 24 5 17 29 25 26 28 36 27 2 3 4 1>;
        };

        hm_r: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 2 4 3 39 40 41 6 18 30 11 23 35 7 8 9 10 34 33 32 31>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_base {
            bindings = <&to 0>;
            key-positions = <26 27 28>;
        };

        spotlight_left {
            bindings = <&kp LG(SPACE)>;
            key-positions = <2 3 4>;
        };

        spotlight_right {
            bindings = <&kp RG(SPACE)>;
            key-positions = <7 8 9>;
        };

        lock_screen {
            bindings = <&kp LG(LC(Q))>;
            key-positions = <4 5 6 7>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 12 11 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp TAB    &kp Q                 &kp W               &kp E             &kp R             &kp T                  &kp Y                &kp U              &kp I              &kp O                &kp P                          &kp RA(BSPC)
&kp ESC    &hm_l LEFT_CONTROL A  &hm_l LEFT_SHIFT S  &hm_l LEFT_ALT D  &hm_l LEFT_GUI F  &kp G                  &kp H                &hm_r RIGHT_GUI J  &hm_r RIGHT_ALT K  &hm_r RIGHT_SHIFT L  &hm_r RIGHT_CONTROL SEMICOLON  &mt LA(LC(RIGHT_SHIFT)) APOSTROPHE
&kp LSHFT  &kp Z                 &kp X               &kp C             &kp V             &kp B                  &kp N                &kp M              &kp COMMA          &kp DOT              &kp FSLH                       &mt RIGHT_SHIFT DELETE
                                                     &mt LEFT_GUI TAB  &kp ENTER         &layer_tap_hold 1 1    &layer_tap_hold 1 1  &kp SPACE          &kp BACKSPACE
            >;

            label = "BASE";
        };

        num_layer {
            bindings = <
&trans  &kp N1            &kp N2          &kp N3                &kp N4                 &kp N5                  &kp N6               &kp N7          &kp N8          &kp N9            &kp N0             &trans
&mo 3   &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT          &kp LEFT_GUI           &kp GRAVE               &kp MINUS            &kp EQUAL       &kp UP_ARROW    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &layer_tap_hold 2 2
&trans  &kp LEFT_ALT      &kp LG(GRAVE)   &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp LS(LG(NUMBER_2))    &kp BACKSLASH        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT         &kp RIGHT_ALT      &trans
                                          &kp LEFT_GUI          &trans                 &layer_tap_hold 1 1     &layer_tap_hold 1 1  &trans          &trans
            >;

            label = "NUM";
        };

        quick_layer {
            bindings = <
&trans      &none             &none           &none         &none         &none     &kp K_PLAY_PAUSE   &none                    &kp C_VOLUME_UP  &kp C_BRIGHTNESS_INC  &kp RG(MINUS)  &kp RG(EQUAL)
&mo 3       &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_GUI  &none     &kp RA(RC(LEFT))   &kp RA(RC(RIGHT_ARROW))  &kp C_VOL_DN     &kp C_BRIGHTNESS_DEC  &none          &kp RC(MINUS)
&caps_word  &trans            &trans          &trans        &trans        &trans    &kp RA(RC(ENTER))  &kp K_MUTE               &kp K_PREV       &kp K_NEXT            &trans         &trans
                                              &kp LEFT_GUI  &trans        &to 0     &to 0              &trans                   &trans
            >;

            label = "QUICK";
        };

        bluetooth_layer {
            bindings = <
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &kp F7  &kp F8  &kp F9  &kp F12  &none
&none        &bt BT_CLR    &none         &none         &none         &none           &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&bootloader  &none         &none         &none         &none         &none           &none  &kp F1  &kp F2  &kp F3  &kp F10  &bootloader
                                         &trans        &trans        &to 0           &to 0  &trans  &trans
            >;

            label = "BLUE";
        };
    };
};
